@startuml

title SimpleTaskManager (STM) authentication

actor "User" as user
control "Web client" as client
control "Popup window" as popup
database "STM-Server" as stm
database "OSM-Server" as osm

user -> client : Opens SimpleTaskManager \n(without being logged in)
client --> user : ""<login page>""

== Authentication ==
user -> client : Clicks "Login" button
client --> popup : ""AuthService.requestLogin()"" \nOpens popup with login-URL
activate popup

rnote over client : The client now periodically checks for the oauth- \ntoken until it's present in the local storage

popup -> stm : Calls ""/oauth2/login""
activate stm


rnote over stm : STM server creates random string as \nstate in case os multiple concurrent logins

stm --> popup : Redirect to """/oauth/authorize"" \n(with state in URL)
deactivate stm

popup -> osm : Requests login page
osm --> popup : ""<login page>""

user -> popup : Enters login data. In case of already \nactive osm.org login, the user \ndoesn't need to do anything here.
popup -> stm : Calls ""/oauth2/callback"" (""redirect_uri"" parameter in URL), \nwhich calls ""oauth2/auth.go::Callback()""
activate stm

stm -> osm : Calls ""osm.org/oauth2/token""
osm --> stm : ""<access token>""

stm -> osm : Calls ""osm.org/api/0.6/user/details"" \n""oauth2/auth.go::requestUserInformation()""
osm --> stm : ""<user information>""

stm --> stm : Create STM-internal token used for \nall requests from STM-client to -server. \n""oauth2/token.go::createTokenString()""

stm --> popup : Redirect to ""/oauth-landing"" of the STM-client
deactivate stm
popup -> popup : Store token into local storage \n""OauthLandingComponent.constructor""

popup -> popup : Close window
deactivate popup

client -> client : Finds token in local storage and \nredirects to ""/dashboard"". \n""AuthService.waitForLocalStorageToken()""

== Authorization of requests ==

client -> client : Web client calls some URL on STM-server
client -> client : Intercept **all** HTTP-requests to the server \nin order to append the token \n""LoggedInInterceptor.intercept()"" \n\nHTTP-Header now contains ""auth_token"" \nvalue from local storage:\n""  Authorization: "eyJ2...YW=="""
client -> stm : HTTP request (with token in header) to server API ""/v.../...""

stm -> stm : Verifies token using a "canonical \nverification" as cryptoanalysts would say \n""oauth2/token.go::verifyToken()""
stm -> stm : Performs operation on server (e.g. load projects)
stm --> client : ""<some returned data>""

== Token expired ==

client -> client : Calls some URL
client -> client : Append token \n""LoggedInInterceptor.intercept()""
client -> stm : HTTP-Header contains the **expired** ""auth_token"" \nvalue from local storage:\n""  Authorization: "eyJ2...YW=="""

stm -> stm : Verification failed (token expired)
stm --> client : ""ERROR: 401""

client -> client : Logout + Redirect to login page \n""AuthService.logout()""

rnote over client : Token has been removed \nfrom the local storage

client --> user : ""<login page>""

@enduml