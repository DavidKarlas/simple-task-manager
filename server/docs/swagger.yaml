definitions:
  api.ProjectAddDto:
    properties:
      project:
        $ref: '#/definitions/project.ProjectDraftDto'
      tasks:
        items:
          $ref: '#/definitions/task.TaskDraftDto'
        type: array
    type: object
  config.ConfigDto:
    properties:
      maxDescriptionLength:
        description: 'Maximum length for the project description in characters. Default:
          1000.'
        type: integer
      maxTasksPerProject:
        description: Maximum amount of tasks allowed for a project.
        type: integer
      sourceRepoUrl:
        description: URL to the source code repository.
        type: string
      testEnvironment:
        description: True when the server runs in an test environment
        type: boolean
    type: object
  export.ProjectExport:
    properties:
      creationDate:
        type: string
      description:
        type: string
      name:
        type: string
      owner:
        type: string
      tasks:
        items:
          $ref: '#/definitions/export.TaskExport'
        type: array
      users:
        items:
          type: string
        type: array
    type: object
  export.TaskExport:
    properties:
      assignedUser:
        type: string
      geometry:
        type: string
      maxProcessPoints:
        type: integer
      name:
        type: string
      processPoints:
        type: integer
    type: object
  project.Project:
    properties:
      creationDate:
        description: 'UTC Date in RFC 3339 format, can be NIL because of old data
          in the database. Example: "2006-01-02 15:04:05.999999999 -0700 MST"'
        type: string
      description:
        description: Some description, can be empty. Will not be NULL but might be
          empty.
        type: string
      doneProcessPoints:
        description: Sum of all process points that have been set. It applies "0 <=
          doneProcessPoints <= totalProcessPoints".
        type: integer
      id:
        description: The ID of the project.
        type: string
      name:
        description: The name of the project. Will not be NULL or empty.
        type: string
      needsAssignment:
        description: When "true", the tasks of this project need to have an assigned
          user.
        type: boolean
      owner:
        description: User-ID of the owner/creator of this project. Will not be NULL
          or empty.
        type: string
      tasks:
        description: List of tasks of the project. Will not be NULL or empty.
        items:
          $ref: '#/definitions/task.Task'
        type: array
      totalProcessPoints:
        description: Sum of all maximum process points of all tasks.
        type: integer
      users:
        description: Array of user-IDs (=members of this project). Will not be NULL
          or empty.
        items:
          type: string
        type: array
    type: object
  project.ProjectDraftDto:
    properties:
      description:
        description: Description of the project. Must not be NULL but cam be empty.
        type: string
      name:
        description: Name of the project. Must not be NULL or empty.
        type: string
      owner:
        description: The user-ID who created this project. Must not be NULL or empty.
        type: string
      users:
        description: A non-empty list of user-IDs. At least the owner should be in
          here.
        items:
          type: string
        type: array
    type: object
  task.Task:
    properties:
      assignedUser:
        description: The user-ID of the user who is currently assigned to this task.
          Will never be NULL but might be empty.
        type: string
      geometry:
        description: A GeoJson feature of the task wit a polygon or multipolygon geometry.
          Will never be NULL or empty.
        type: string
      id:
        description: The ID of the task.
        type: string
      maxProcessPoints:
        description: The maximum amount of process points of this task. Is larger
          than zero.
        type: integer
      name:
        description: The name of the task. If the properties of the geometry feature
          contain the field "name", this field is used here. If no name has been set,
          this field will be empty.
        type: string
      processPoints:
        description: The amount of process points that have been set by the user.
          It applies that "0 <= processPoints <= maxProcessPoints".
        type: integer
    type: object
  task.TaskDraftDto:
    properties:
      geometry:
        description: A GeoJson feature with a polygon or multi-polygon geometry. If
          the feature properties contain the field "name", then this will be used
          as the name of the task.
        type: string
      maxProcessPoints:
        description: The maximum amount of process points of this task. Must be larger
          than zero.
        type: integer
      processPoints:
        description: The amount of process points that have been set by the user.
          It applies that "0 <= processPoints <= maxProcessPoints".
        type: integer
    type: object
info:
  contact:
    name: STM issue tracker
    url: https://github.com/hauke96/simple-task-manager/issues
  description: This is the SimpleTaskManager (STM) Server. See the GitHub repo '/doc/api/'
    for further details on authentication, websockets and changelogs.
  license:
    name: GNU General Public License 3.0
    url: https://github.com/hauke96/simple-task-manager/blob/master/LICENSE
  title: SimpleTaskManager Server
  version: 1.3.0
paths:
  /doc:
    get:
      produces:
      - text/html
      responses: {}
      summary: A Swagger UI with all kinds of API related information.
      tags:
      - info
  /info:
    get:
      produces:
      - text/plain
      responses:
        "200":
          description: Some bunch of text with basic information about this server
          schema:
            type: string
      summary: Shows very basic information about this server.
      tags:
      - info
  /oauth_callback:
    get:
      description: OAuth callback called after OSM login. Performs the OAuth authentication
        by getting an OSM access token. See GitHub Repo under '/doc/authentication'
        for further information.
      parameters:
      - description: The config key sent to the OSM login page.
        in: query
        name: config
        required: true
        type: string
      - description: The URL that should be redirected to after authentication
        in: query
        name: redirect
        required: true
        type: string
      responses: {}
      tags:
      - authentication
  /oauth_login:
    get:
      description: Gets OSM login token and therefore redirects to the OSM Login page.
        See GitHub Repo under '/doc/authentication' for further information.
      parameters:
      - description: The URL that should be redirected to after authentication
        in: query
        name: redirect
        required: true
        type: string
      responses: {}
      tags:
      - authentication
  /v2.7/config:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/config.ConfigDto'
      summary: Gets the servers configuration containing important information for
        the client.
      tags:
      - config
  /v2.7/project/{id}:
    get:
      description: Gets a specific project. The requesting user must be a member of
        the project.
      parameters:
      - description: ID of the project to get
        in: path
        name: project_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/project.Project'
      summary: Get a specific project.
      tags:
      - projects
  /v2.7/projects:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/project.Project'
            type: array
      summary: Get all projects for the requesting user.
      tags:
      - projects
    post:
      parameters:
      - description: Draft project with draft task list
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/api.ProjectAddDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/project.Project'
      summary: Adds a new project.
      tags:
      - projects
  /v2.7/projects/{id}:
    delete:
      description: Deletes the specified project. The requesting user must be the
        owner of the project.
      parameters:
      - description: ID of the project to delete
        in: path
        name: id
        required: true
        type: string
      responses: {}
      summary: Delete a project.
      tags:
      - projects
  /v2.7/projects/{id}/description:
    put:
      description: Update the projects description. The requesting user must be the
        owner of the project.
      parameters:
      - description: ID of the project
        in: path
        name: id
        required: true
        type: string
      - description: The new description of the project
        in: body
        name: new_desc
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/project.Project'
      summary: Update project description.
      tags:
      - projects
  /v2.7/projects/{id}/export:
    get:
      description: This aims to transfer a project to another STM instance or to simply
        create a backup of a project.
      parameters:
      - description: ID of the project
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/project.Project'
      summary: Get a JSON representation of the project.
      tags:
      - projects
  /v2.7/projects/{id}/name:
    put:
      description: Updates the projects name/title. The requesting user must be the
        owner of the project.
      parameters:
      - description: ID of the project
        in: path
        name: id
        required: true
        type: string
      - description: The new name of the project
        in: body
        name: new_name
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/project.Project'
      summary: Update project name.
      tags:
      - projects
  /v2.7/projects/{id}/users:
    delete:
      description: The requesting user must be a member (but not the owner) of the
        project will be removed.
      parameters:
      - description: ID of the project the requesting user should leave
        in: path
        name: id
        required: true
        type: string
      responses: {}
      summary: Removes the requesting user from project.
      tags:
      - projects
    post:
      description: Adds the given user to the project. The requesting user must be
        the owner of the project.
      parameters:
      - description: ID of the project
        in: path
        name: id
        required: true
        type: string
      - description: The OSM user-ID to add to the project
        in: query
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/project.Project'
      summary: Adds a user to the project
      tags:
      - projects
  /v2.7/projects/{id}/users/{uid}:
    delete:
      description: Removes a user from the project. The requesting user must be the
        owner of the project and cannot be removed.
      parameters:
      - description: ID of the project the requesting user should leave
        in: path
        name: id
        required: true
        type: string
      - description: OSM user-Id of the user who should be removed
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/project.Project'
      summary: Remove a user from a project.
      tags:
      - projects
  /v2.7/projects/import:
    post:
      description: This aims to import a project from e.g. a backup or to migrate
        to another STM instance.
      parameters:
      - description: The project to import
        in: body
        name: projectExport
        required: true
        schema:
          $ref: '#/definitions/export.ProjectExport'
      produces:
      - application/json
      responses: {}
      summary: Imports a previously exported project.
      tags:
      - projects
  /v2.7/tasks/{id}/assignedUser:
    delete:
      description: Unassigns the requesting user from the given task. The requesting
        user must be a member of the project and must be assigned to the given task.
      parameters:
      - description: The ID of the task
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/task.Task'
      summary: Unassigns a user from a task.
      tags:
      - tasks
    post:
      description: Assigns the requesting user to the given task. The requesting user
        must be a member of the project.
      parameters:
      - description: The ID of the task
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/task.Task'
      summary: Assigns a user to a task
      tags:
      - tasks
  /v2.7/tasks/{id}/processPoints:
    post:
      description: Sets the process points of a task. The requesting user must be
        a member of the project. If the project has more than one member, the requesting
        user must be assigned to the given task.
      parameters:
      - description: The ID of the task
        in: path
        name: id
        required: true
        type: string
      - description: The new amount of process points of the task
        in: query
        minimum: 0
        name: process_points
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/task.Task'
      summary: Sets the process points of a task.
      tags:
      - tasks
  /v2.7/updates:
    get:
      description: Established an websocket connection to receive updates on projects.
        This requires the same authentication as normal HTTP endpoints. See the GitHub
        repo '/doc/api' for information on the messaging protocol.
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/project.Project'
            type: array
      summary: Established an websocket connection to receive updates on projects.
      tags:
      - websocket
swagger: "2.0"
